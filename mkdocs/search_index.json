{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nCes premiers TD vont nous permettre d'appr\u00e9hender le \nFramework PHP Symfony 2\n.\n\n\nUn framework est un cadre de travail de d\u00e9veloppement bas\u00e9 sur un certain de nombre \ncomposant\n\n\nM\u00e9thodes d'installation\n\n\nPlusieurs m\u00e9thodes peuvent \u00eatre utiliser afin d'initialiser un projet bas\u00e9 sur Symfony full-stack - \nVoir les diff\u00e9rentes distributions\n\n\n\n\nSynfony Installer\n - recommand\u00e9\n\n\nComposer\n \n\n\nZIP Package\n\n\n\n\nSymfony Installer\n\n\nNous allons r\u00e9cup\u00e9rer un executable qui va automatiser un certain nombres de t\u00e2ches afin d'instancier un projet\nSymfony2.\n\n\nCet installer, nous allons le mettre dans notre \n~/bin\n\n\n$ curl -LsS http://symfony.com/installer -o ~/bin/symfony\n\n\n\n\n$ chmod a+x ~/bin/symfony\n\n\n\n\nCet ex\u00e9cutable accepte diff\u00e9rents arguments :\n\n\n\n\nCommande \u00e0 \u00e9x\u00e9cuter (\nnew\n, \nself-update\n)\n\n\nLe nom du projet avec la commande \nnew\n\n\nVersion de Symfony d\u00e9sir\u00e9 (\n2.6.5\n, \n2.7.0-RC1\n, \nlts\n)\n\n\n\n\nDu coup, afin d'instancier un projet\n\n\n$ symfony new new_project\n\n\n\n\nQue fait-il ?\n\n\nCet \nutilitaire\n nous permet d'automatiser plusieurs t\u00e2ches. \n\n\n\n\nV\u00e9rifie les permissions\n\n\nT\u00e9l\u00e9chargement du paquet\n\n\nExtrait le paquet\n\n\nMet \u00e0 jour les param\u00e8tres - \napp/config/parameter.yml\n\n\nMet \u00e0 jour les composer.json\n\n\nCr\u00e9er un fichier \n.gitignore\n\n\nV\u00e9rifie les pr\u00e9requis\n\n\n\n\n\n\nQu'obtient-on ?\n\n\napp/                            # R\u00e9pertoire des fichiers de application globale\n    cache                       # R\u00e9pertoire d'\u00e9criture du cache\n    config                      # R\u00e9pertoire de configuration de application globale\n        configdev.yml           # Configuration environnement dev\n        configprod.yml          # Configuration environnement prod\n        configtest.yml          # Configuration environnement test\n        config.yml              # Configuration environnement global\n        parameters.yml          # Param\u00e8tre application\n        parameters.yml.dist     # Template d'un fichier de param\u00e9trage\n        routingdev.yml          # Configuration routing dev\n        routing.yml             # Configuration routing\n        security.yml            # Configuration de la s\u00e9curit\u00e9\n        services.yml            # Configuration des services\n    logs                        # Dossier des logs\n    Resources                   # Ressources application globale (static + templates)\n    AppCache.php                # Param\u00e9trage du cache\n    AppKernel.php               # Kernel loading\n    autoload.php                # \n    bootstrap.php.cache\n    check.php\n    console                     # console pour les CLI\n    phpunit.xml.dist\n    SymfonyRequirements.php\nbin/                            # ex\u00e9cutable tierce partie\nsrc/\n    AppBundle/                  # Bundle m\u00e9tier \nvendor/                         # Vendor distribution full-stack\n    composer\n    doctrine\n    incenteev\n    jdorn\n    kriswallsmith\n    monolog\n    psr\n    sensio\n    sensiolabs\n    swiftmailer\n    symfony\n    twig\n    autoload.php\nweb/                            # R\u00e9pertoire accessible du web\n    app_dev.php                 # Controller principal de l'application en mode dev\n    app.php                     # Controller principal de l'application en mode prod\n    apple-touch-icon.png\n    bundles\n    config.php\n    favicon.ico\n    robots.txt\ncomposer.json\ncomposer.lock\nREADME.md\n\n\n\nLancer l'application\n\n\nEn mode d\u00e9veloppement, Symfony2 peut se lancer en s'appuyant sur le \nbuilt-in Web Server de php\n gr\u00e2ce \u00e0 la commande :\n\n\n$ app/console server:run\n\n\n\n\n+ informations\n\n\nV\u00e9rifier le bon fonctionnement de l'installation en acc\u00e9dant via votre navigateur \u00e0 l'URL \nhttp://127.0.0.1:8000\n indiqu\u00e9 par le built-in Web Server de PHP \n\n\n\n\nHelp\n\n\nRendre le \n~/bin\n global\n\n\nIl faut modifier notre .bashrc \n\n\n$ vi ~/.bashrc\n\n\n\n\nEt eporter $PATH en y ajoutant notre \n~/bin\n\n\nexport PATH=$PATH:~/bin\n\n\n\n\nNe pas oublier de recharger \n.bashrc\n \n\n\n$ source ~/.bashrc", 
            "title": "Installation"
        }, 
        {
            "location": "/#introduction", 
            "text": "Ces premiers TD vont nous permettre d'appr\u00e9hender le  Framework PHP Symfony 2 .  Un framework est un cadre de travail de d\u00e9veloppement bas\u00e9 sur un certain de nombre  composant", 
            "title": "Introduction"
        }, 
        {
            "location": "/#methodes-dinstallation", 
            "text": "Plusieurs m\u00e9thodes peuvent \u00eatre utiliser afin d'initialiser un projet bas\u00e9 sur Symfony full-stack -  Voir les diff\u00e9rentes distributions   Synfony Installer  - recommand\u00e9  Composer    ZIP Package", 
            "title": "M\u00e9thodes d'installation"
        }, 
        {
            "location": "/#symfony-installer", 
            "text": "Nous allons r\u00e9cup\u00e9rer un executable qui va automatiser un certain nombres de t\u00e2ches afin d'instancier un projet\nSymfony2.  Cet installer, nous allons le mettre dans notre  ~/bin  $ curl -LsS http://symfony.com/installer -o ~/bin/symfony  $ chmod a+x ~/bin/symfony  Cet ex\u00e9cutable accepte diff\u00e9rents arguments :   Commande \u00e0 \u00e9x\u00e9cuter ( new ,  self-update )  Le nom du projet avec la commande  new  Version de Symfony d\u00e9sir\u00e9 ( 2.6.5 ,  2.7.0-RC1 ,  lts )   Du coup, afin d'instancier un projet  $ symfony new new_project  Que fait-il ?  Cet  utilitaire  nous permet d'automatiser plusieurs t\u00e2ches.    V\u00e9rifie les permissions  T\u00e9l\u00e9chargement du paquet  Extrait le paquet  Met \u00e0 jour les param\u00e8tres -  app/config/parameter.yml  Met \u00e0 jour les composer.json  Cr\u00e9er un fichier  .gitignore  V\u00e9rifie les pr\u00e9requis    Qu'obtient-on ?  app/                            # R\u00e9pertoire des fichiers de application globale\n    cache                       # R\u00e9pertoire d'\u00e9criture du cache\n    config                      # R\u00e9pertoire de configuration de application globale\n        configdev.yml           # Configuration environnement dev\n        configprod.yml          # Configuration environnement prod\n        configtest.yml          # Configuration environnement test\n        config.yml              # Configuration environnement global\n        parameters.yml          # Param\u00e8tre application\n        parameters.yml.dist     # Template d'un fichier de param\u00e9trage\n        routingdev.yml          # Configuration routing dev\n        routing.yml             # Configuration routing\n        security.yml            # Configuration de la s\u00e9curit\u00e9\n        services.yml            # Configuration des services\n    logs                        # Dossier des logs\n    Resources                   # Ressources application globale (static + templates)\n    AppCache.php                # Param\u00e9trage du cache\n    AppKernel.php               # Kernel loading\n    autoload.php                # \n    bootstrap.php.cache\n    check.php\n    console                     # console pour les CLI\n    phpunit.xml.dist\n    SymfonyRequirements.php\nbin/                            # ex\u00e9cutable tierce partie\nsrc/\n    AppBundle/                  # Bundle m\u00e9tier \nvendor/                         # Vendor distribution full-stack\n    composer\n    doctrine\n    incenteev\n    jdorn\n    kriswallsmith\n    monolog\n    psr\n    sensio\n    sensiolabs\n    swiftmailer\n    symfony\n    twig\n    autoload.php\nweb/                            # R\u00e9pertoire accessible du web\n    app_dev.php                 # Controller principal de l'application en mode dev\n    app.php                     # Controller principal de l'application en mode prod\n    apple-touch-icon.png\n    bundles\n    config.php\n    favicon.ico\n    robots.txt\ncomposer.json\ncomposer.lock\nREADME.md  Lancer l'application  En mode d\u00e9veloppement, Symfony2 peut se lancer en s'appuyant sur le  built-in Web Server de php  gr\u00e2ce \u00e0 la commande :  $ app/console server:run  + informations  V\u00e9rifier le bon fonctionnement de l'installation en acc\u00e9dant via votre navigateur \u00e0 l'URL  http://127.0.0.1:8000  indiqu\u00e9 par le built-in Web Server de PHP", 
            "title": "Symfony Installer"
        }, 
        {
            "location": "/#help", 
            "text": "Rendre le  ~/bin  global  Il faut modifier notre .bashrc   $ vi ~/.bashrc  Et eporter $PATH en y ajoutant notre  ~/bin  export PATH=$PATH:~/bin  Ne pas oublier de recharger  .bashrc    $ source ~/.bashrc", 
            "title": "Help"
        }, 
        {
            "location": "/first/", 
            "text": "Introduction\n\n\nNous allons cr\u00e9er un premier bundle \nTestBundle\n afin de prendre en main le paradigme MVC dans une structure \nSymfony2.\n\n\nProcess :\n\n\n\n\nCr\u00e9ation d'un bundle\n\n\nCr\u00e9ation d'un controller de Test\n\n\nCr\u00e9ation d'une action\n\n\nTemplating d'une action\n\n\nTemplating d'un layout\n\n\nHTML\n\n\nCSS / Assets\n\n\n\n\n\n\n\n\nCr\u00e9ation du bundle\n\n\nPour cela nous allons utliser une ligne de commande qui va nous permettre de g\u00e9n\u00e9rer un skeleton de Bundle.\n\n\nCette commande n'est \u00e0 effectuer qu'en environnement de developpement\n\n\n$ app/console generate:bundle\n\n\n\n\nUn certain nombre d'informations seront n\u00e9cessaires :\n\n\n\n\nNamespace\n\n\nVendor / Cr\u00e9ateur - \nLp\n\n\nNom du bundle - \nTest\n\n\nSuffixe obligatoire - \nBundle\n\n\nDonc \nLp/TestBundle\n\n\n\n\n\n\nChoisir le nom - Par convention on utilise la d\u00e9finition du namespace sans slash\n\n\nChoisir la destination - \nsrc/\n car bundle application m\u00e9tier\n\n\nFormat de configuration - Prendre \nannotation\n\n\nStructure \u00e0 g\u00e9n\u00e9rer - \nno\n\n\nConfirmation\n\n\n\n\nQue s'est-il pass\u00e9 ?\n\n\nIl faut se rendre dans le r\u00e9pertoire \nsrc/Lp/TestBundle\n afin de voir que des fichiers ont \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9.\n\n\n\n\nFichier \nLpTestBundle.php\n qui est le seul fichier obligatoire afin de charger le bundle dans le Kernel\n\n\nAutochargement dans le \nAppKernel\n\n\nEnregistrement de la d\u00e9finition de nos routes dans \nsrc/Lp/TestBundle/Resources/config/routing.yml\n\n\n\n\nCr\u00e9ation d'un controller\n\n\nDans un controller nomm\u00e9 \nDemoController\n, il nous faut diff\u00e9rentes actions :\n\n\n\n\nindex\n : qui permet d'afficher un texte statique\n\n\nwhatsMyName\n : qui permet d'afficher une information en variable d'URL\n\n\n\n\nPour chacune de ses actions cr\u00e9er un template propre.\n\n\nClass Controller\n\n\nUne Class Controller permet de g\u00e9rer diff\u00e9rentes actions appel\u00e9es par le routing.\n\n\nLors de la g\u00e9n\u00e9ration du skeleton de notre bundle, nous avons un r\u00e9pertoire \nController\n. Si nous observons \nle fichier de routing de notre application 'app/config/routing.yml', on constate que nous chargeons toutes les actions\nparam\u00e9tr\u00e9es dans les class se trouvant dans le dossier \nController\n\n\nlp_test:\n    resource: \"@LpTestBundle/Controller/\"\n    type:     annotation\n    prefix:   /\n\napp:\n    resource: \"@AppBundle/Controller/\"\n    type:     annotation\n\n\n\nDonc il suffit de cr\u00e9er la Class ci-dessous dans un fichier nomm\u00e9 \nDemoController.php\n(nommage autoload PSR-4) :\n\n\n?php\n\nnamespace Lp\\TestBundle\\Controller; # d\u00e9claration du namespace\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller; # import de la Class Controller (h\u00e9ritage)\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route; # utiliser pour configuration en annotation\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template; # utiliser pour configuration en annotation\n\nclass DemoController extends Controller\n{\n\n}\n\n\n\nEt pour cr\u00e9er une action, il suffit d'\u00e9crire une m\u00e9thode annot\u00e9e dans cette classe \n\n\n/**\n * @Route(\"/index\", name=\"_index\") # route\n * @Template() # template partial appell\u00e9 : LpTestBundle:Demo:index.html.twig\n */\npublic function indexAction()\n{\n    return array(   # retourne un tableau cl\u00e9 / valeur et les cl\u00e9s sont expos\u00e9es dans le template\n            // ...\n        );    \n}\n\n\n\nIl existe une commande afin de g\u00e9n\u00e9rer un controller :\n\n\n$ app/console generate:controller\n\n\n\nGestion des param\u00e8tres en annotation\n\n\n /**\n  * @Route(\"/index/{param}\") # route\n  * @Template() # template partial appell\u00e9 : LpTestBundle:Demo:index.html.twig\n  */\n public function indexAction($param)\n {\n     return array(   # retourne un tableau cl\u00e9 / valeur et les cl\u00e9s sont expos\u00e9es dans le template\n             // ...\n         );    \n}\n\n\n\nAfin d'indiquer la r\u00e9cup\u00e9ration d'un param\u00e8tre, il faut le d\u00e9finir dans le route.\nIl est pass\u00e9 en argument de la m\u00e9thode.\n\n\nOn peut y int\u00e9grer l'objet Request\n\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\npublic function indexAction($Request $request)\n{\n    $page = $request-\nquery-\nget('page', 1);\n\n    // ...\n}\n\n\n\n+ informations\n\n\nGestion du templating\n\n\nLe templating dans le framework Symfony est g\u00e9r\u00e9 par d\u00e9fault avec Twig. \n\n\nQue ce soit au niveau App ou Bundle, tous les templates se localisent dans \nResources/views\n.\n\n\nLocalis\u00e9 un template partial\n\n\nA partir d'un controller afin d'\u00e9x\u00e9cuter le rendu de l'action on fait appel \u00e0 un template. Il est localis\u00e9 en faisant \nappel \u00e0 la m\u00e9thode \nrender()\n de la class \nSymfony\\Bundle\\FrameworkBundle\\Controller\\Controller\n dans laquelle est \ninject\u00e9 le service \ntwig\n \u00e0 qui appartient cette fonction et renvoie un object \nResponse\n.\n\n\nEn PHP\n\n\n// renders app/Resources/views/hello/greetings/index.html.twig\nreturn $this-\nrender('hello/greetings/index.html.twig', array(\n    'name' =\n $name\n));\n\n\n\nEn Annotation\n\n\n /**\n  * @Template(\"LpTestBundle:Demo:another.html.twig\")\n  */\n\n\n\nGestion d'un layout\n\n\nPar d\u00e9fault, la cr\u00e9ation du projet g\u00e9n\u00e8re un template \napp/Ressources/views/base.html.twig\n (block mapp\u00e9s) et celui-ci \npeut-\u00eatre \u00e9tendu gr\u00e2ce \u00e0 la fonction twig \n{% extends ::base.html.twig %}\n\n\nOn peut aussi stock\u00e9 un layout dans nos Bundles. Afin de le localiser il faut utiliser le ShortName du Bundle \n\nLpTestBundle:layout.html.twig\n faisant r\u00e9f\u00e9rence au fichier se trouvant dans \n\nsrc/Lp/TestBundle/Ressources/views/layout.html.twig\n \n\n\nPar exemple\n\n\nNous avons via la d\u00e9finition de notre routing attaqu\u00e9 le controller \nLpTestBundle:DemoController:indexAction\n qui par \nd\u00e9fault le rendu va \u00eatre compil\u00e9 dans le template \nLpTestBundle:Demo:index.html.twig\n qui est localis\u00e9 dans \n\nsrc/Lp/TestBundle/Resources/views/Demo/index.html.twig\n. Dans ce template partial on fait appel \u00e0 un layout que nous avons \ncr\u00e9\u00e9er dans notre Bundle \nsrc/Lp/TestBundle/Resources/views/layout.html.twig\n.\n\n\n# src/Lp/TestBundle/Resources/views/index.html.twig\n{% extends \"LpTestBundle:layout.html.twig\" %}\n\n{% block title %}LpTestBundle:Demo:index{% endblock %}\n\n{% block body %}\n    \nh1\nWelcome to the Demo:index page\n/h1\n\n{% endblock %}\n\n\n\n+ informations\n\n\nCr\u00e9er son layout\n\n\nFaire \u00e9voluer le layout en int\u00e9grant le \nstarter template bootstrap\n en mappant \nles zones dynamiques suivantes (block):\n\n\n\n\n{% block title %}\n - balise title\n\n\n{% block stylesheets %}\n - import des JS\n\n\n{% block body %}\n - corps balise body\n\n\n{% block javascripts %}\n - import des JS\n\n\n\n\nFaire appel via un CDN, les librairies externes (CSS/JS)\n\n\n!-- Latest compiled and minified CSS --\n\n\nlink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" integrity=\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" crossorigin=\"anonymous\"\n\n\n\n!-- Optional theme --\n\n\nlink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\" integrity=\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\" crossorigin=\"anonymous\"\n\n\n\n!-- Latest compiled and minified JavaScript --\n\n\nscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" integrity=\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\" crossorigin=\"anonymous\"\n/script\n\n\n\n\nBien-s\u00fbr une fois correctement mapp\u00e9, faire appel \u00e0 ce layout dans le rendu des deux actions d\u00e9finies\n\n\n\nLien\n\n\nDans le layout, mettre en place un menu avec les 2 actions d\u00e9finies dans la class DemoController\n\n\nAfin de r\u00e9cup\u00e9rer l'url d'une action il suffit d'utiliser le helper twig sp\u00e9cialement fait pour Symfony2 \npath()\n, \nqui prend comme premier argument le nom de la route et en second, un tableau \n{}\n qui repr\u00e9sente les param\u00e8tres. \n\n\na href=\"{{ path('_index') }}\"\nGo to index\n/a\n\n\n\n\nEn annotation, on d\u00e9finit le nom d'une route comme ci-dessous\n\n\n/**\n * @Route(\"/index\", name=\"_index\")\n * @Template()\n */\n\n\n\n+ informations\n\n\nWeb Assets\n\n\nL'organisation des fichiers dans un projet symfony2 impose que seul le r\u00e9pertoire \nweb\n est accessible du Web.\nNos fichiers static doivent y \u00eatre donc stock\u00e9s afin de les servir au client.\n\n\nCes assets, d\u00e9pendants de nos bundles, doivent \u00eatre stock\u00e9s dans \nsrc/Lp/TestBunble/Resources/public\n. Afin de les \nrendre accessible, il faut les publier \n\n\n$ app/console assets:install --symlink\n\n\n\n\nL'option \n-symlink\n permet de faire un lien symbolique.\n\n\nPasser les assets appel\u00e9s dans le layout en CDN par le bundle \nLpTestBundle\n en local.\n\n\nPar exemple\n\n\nlink rel=\"stylesheet\" href=\"{{ asset('css/main.css') }}\" /\n # Stock\u00e9 dans app/Resources/public/css/main.css\n\nlink rel=\"stylesheet\" href=\"{{ asset('bundle/lptest/css/main.css') }}\" /\n # Stock\u00e9 dans src/Lp/TestBundle/Resources/Public/css/main.css\n\n\n\nAssetic\n\n\nAssetic se basant sur Asset est un Bundle Symfony Framework afin de g\u00e9rer les fichiers static en les filtrants, comme :\n\n\n\n\nCompil\u00e9 LESS / SAAS / CoffeeScript\n\n\nMinifiier / Combin\u00e9\n\n\nOptimisation d'images\n\n\n\n\n+ informations\n\n\nTests fonctionnels\n\n\nSymfony int\u00e8gre un librairie de test unitaire \nPHPUnit\n.\n\n\nInstallation\n\n\n$ wget https://phar.phpunit.de/phpunit.phar # version 5.0 si php \n 5.6 sinon phpunit-4.8.9.phar\n$ chmod +x phpunit.phar\n$ sudo mv phpunit.phar ~/bin/phpunit\n$ phpunit --version\n\n\n\nLes Tests fonctionnels sont l\u00e0 afin tester les diff\u00e9rentes couche de votre application du routing jusqu'\u00e0 la vue :\n\n\n\n\nFaire un requ\u00eate\n\n\nTester la r\u00e9ponse\n\n\n\n\nPour cela, nous allons \u00e9crire des classes afin de simuler des actions / calculs et nous tracer / tester (\nassertX)\n) les \nr\u00e9sultats afin de faire remonter d'\u00e9ventuelles erreurs.\n\n\nEcrire un test\n\n\nLan\u00e7ons le test \nDemoController\n :\n\n\nphpunit -c app src/Lp/TestBundle/Tests/Controller/DemoControllerTest.php\n\n\n\n-c app\n est une option de configuration afin d'aller checher les class de test (fichier / dossier)\n\n\nAvec la class \nDemoControllerTest\n :\n\n\n?php\n\nnamespace Lp\\TestBundle\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase; # class \u00e9tendue PHPUnit_Framework_TestCase\n\nclass DemoControllerTest extends WebTestCase\n{\n    public function testIndex()\n    {\n        $client = static::createClient();\n\n        $crawler = $client-\nrequest('GET', '/index');\n    }\n\n    public function testWhatsmyname()\n    {\n        $client = static::createClient();\n\n        $crawler = $client-\nrequest('GET', '/whats-my-name/geoffroy');\n\n        $this-\nassertTrue(200 === $client-\ngetResponse()-\ngetStatusCode()); # second argument peut-\u00eatre un message\n    }\n\n}\n\n\n\nPour faire une d\u00e9monstration, changer le routing de l'une des actions test\u00e9es.\n\n\n+ informations\n\n\nDoctrine\n\n\nForm\n\n\nFaire un test du formulaire", 
            "title": "Premier pas"
        }, 
        {
            "location": "/first/#introduction", 
            "text": "Nous allons cr\u00e9er un premier bundle  TestBundle  afin de prendre en main le paradigme MVC dans une structure \nSymfony2.  Process :   Cr\u00e9ation d'un bundle  Cr\u00e9ation d'un controller de Test  Cr\u00e9ation d'une action  Templating d'une action  Templating d'un layout  HTML  CSS / Assets", 
            "title": "Introduction"
        }, 
        {
            "location": "/first/#creation-du-bundle", 
            "text": "Pour cela nous allons utliser une ligne de commande qui va nous permettre de g\u00e9n\u00e9rer un skeleton de Bundle.  Cette commande n'est \u00e0 effectuer qu'en environnement de developpement  $ app/console generate:bundle  Un certain nombre d'informations seront n\u00e9cessaires :   Namespace  Vendor / Cr\u00e9ateur -  Lp  Nom du bundle -  Test  Suffixe obligatoire -  Bundle  Donc  Lp/TestBundle    Choisir le nom - Par convention on utilise la d\u00e9finition du namespace sans slash  Choisir la destination -  src/  car bundle application m\u00e9tier  Format de configuration - Prendre  annotation  Structure \u00e0 g\u00e9n\u00e9rer -  no  Confirmation   Que s'est-il pass\u00e9 ?  Il faut se rendre dans le r\u00e9pertoire  src/Lp/TestBundle  afin de voir que des fichiers ont \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9.   Fichier  LpTestBundle.php  qui est le seul fichier obligatoire afin de charger le bundle dans le Kernel  Autochargement dans le  AppKernel  Enregistrement de la d\u00e9finition de nos routes dans  src/Lp/TestBundle/Resources/config/routing.yml", 
            "title": "Cr\u00e9ation du bundle"
        }, 
        {
            "location": "/first/#creation-dun-controller", 
            "text": "Dans un controller nomm\u00e9  DemoController , il nous faut diff\u00e9rentes actions :   index  : qui permet d'afficher un texte statique  whatsMyName  : qui permet d'afficher une information en variable d'URL   Pour chacune de ses actions cr\u00e9er un template propre.", 
            "title": "Cr\u00e9ation d'un controller"
        }, 
        {
            "location": "/first/#class-controller", 
            "text": "Une Class Controller permet de g\u00e9rer diff\u00e9rentes actions appel\u00e9es par le routing.  Lors de la g\u00e9n\u00e9ration du skeleton de notre bundle, nous avons un r\u00e9pertoire  Controller . Si nous observons \nle fichier de routing de notre application 'app/config/routing.yml', on constate que nous chargeons toutes les actions\nparam\u00e9tr\u00e9es dans les class se trouvant dans le dossier  Controller  lp_test:\n    resource: \"@LpTestBundle/Controller/\"\n    type:     annotation\n    prefix:   /\n\napp:\n    resource: \"@AppBundle/Controller/\"\n    type:     annotation  Donc il suffit de cr\u00e9er la Class ci-dessous dans un fichier nomm\u00e9  DemoController.php (nommage autoload PSR-4) :  ?php\n\nnamespace Lp\\TestBundle\\Controller; # d\u00e9claration du namespace\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller; # import de la Class Controller (h\u00e9ritage)\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route; # utiliser pour configuration en annotation\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template; # utiliser pour configuration en annotation\n\nclass DemoController extends Controller\n{\n\n}  Et pour cr\u00e9er une action, il suffit d'\u00e9crire une m\u00e9thode annot\u00e9e dans cette classe   /**\n * @Route(\"/index\", name=\"_index\") # route\n * @Template() # template partial appell\u00e9 : LpTestBundle:Demo:index.html.twig\n */\npublic function indexAction()\n{\n    return array(   # retourne un tableau cl\u00e9 / valeur et les cl\u00e9s sont expos\u00e9es dans le template\n            // ...\n        );    \n}  Il existe une commande afin de g\u00e9n\u00e9rer un controller :  $ app/console generate:controller", 
            "title": "Class Controller"
        }, 
        {
            "location": "/first/#gestion-des-parametres-en-annotation", 
            "text": "/**\n  * @Route(\"/index/{param}\") # route\n  * @Template() # template partial appell\u00e9 : LpTestBundle:Demo:index.html.twig\n  */\n public function indexAction($param)\n {\n     return array(   # retourne un tableau cl\u00e9 / valeur et les cl\u00e9s sont expos\u00e9es dans le template\n             // ...\n         );    \n}  Afin d'indiquer la r\u00e9cup\u00e9ration d'un param\u00e8tre, il faut le d\u00e9finir dans le route.\nIl est pass\u00e9 en argument de la m\u00e9thode.  On peut y int\u00e9grer l'objet Request  use Symfony\\Component\\HttpFoundation\\Request;\n\npublic function indexAction($Request $request)\n{\n    $page = $request- query- get('page', 1);\n\n    // ...\n}  + informations", 
            "title": "Gestion des param\u00e8tres en annotation"
        }, 
        {
            "location": "/first/#gestion-du-templating", 
            "text": "Le templating dans le framework Symfony est g\u00e9r\u00e9 par d\u00e9fault avec Twig.   Que ce soit au niveau App ou Bundle, tous les templates se localisent dans  Resources/views .", 
            "title": "Gestion du templating"
        }, 
        {
            "location": "/first/#localise-un-template-partial", 
            "text": "A partir d'un controller afin d'\u00e9x\u00e9cuter le rendu de l'action on fait appel \u00e0 un template. Il est localis\u00e9 en faisant \nappel \u00e0 la m\u00e9thode  render()  de la class  Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller  dans laquelle est \ninject\u00e9 le service  twig  \u00e0 qui appartient cette fonction et renvoie un object  Response .  En PHP  // renders app/Resources/views/hello/greetings/index.html.twig\nreturn $this- render('hello/greetings/index.html.twig', array(\n    'name' =  $name\n));  En Annotation   /**\n  * @Template(\"LpTestBundle:Demo:another.html.twig\")\n  */", 
            "title": "Localis\u00e9 un template partial"
        }, 
        {
            "location": "/first/#gestion-dun-layout", 
            "text": "Par d\u00e9fault, la cr\u00e9ation du projet g\u00e9n\u00e8re un template  app/Ressources/views/base.html.twig  (block mapp\u00e9s) et celui-ci \npeut-\u00eatre \u00e9tendu gr\u00e2ce \u00e0 la fonction twig  {% extends ::base.html.twig %}  On peut aussi stock\u00e9 un layout dans nos Bundles. Afin de le localiser il faut utiliser le ShortName du Bundle  LpTestBundle:layout.html.twig  faisant r\u00e9f\u00e9rence au fichier se trouvant dans  src/Lp/TestBundle/Ressources/views/layout.html.twig", 
            "title": "Gestion d'un layout"
        }, 
        {
            "location": "/first/#par-exemple", 
            "text": "Nous avons via la d\u00e9finition de notre routing attaqu\u00e9 le controller  LpTestBundle:DemoController:indexAction  qui par \nd\u00e9fault le rendu va \u00eatre compil\u00e9 dans le template  LpTestBundle:Demo:index.html.twig  qui est localis\u00e9 dans  src/Lp/TestBundle/Resources/views/Demo/index.html.twig . Dans ce template partial on fait appel \u00e0 un layout que nous avons \ncr\u00e9\u00e9er dans notre Bundle  src/Lp/TestBundle/Resources/views/layout.html.twig .  # src/Lp/TestBundle/Resources/views/index.html.twig\n{% extends \"LpTestBundle:layout.html.twig\" %}\n\n{% block title %}LpTestBundle:Demo:index{% endblock %}\n\n{% block body %}\n     h1 Welcome to the Demo:index page /h1 \n{% endblock %}  + informations", 
            "title": "Par exemple"
        }, 
        {
            "location": "/first/#creer-son-layout", 
            "text": "Faire \u00e9voluer le layout en int\u00e9grant le  starter template bootstrap  en mappant \nles zones dynamiques suivantes (block):   {% block title %}  - balise title  {% block stylesheets %}  - import des JS  {% block body %}  - corps balise body  {% block javascripts %}  - import des JS   Faire appel via un CDN, les librairies externes (CSS/JS)  !-- Latest compiled and minified CSS --  link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" integrity=\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" crossorigin=\"anonymous\"  !-- Optional theme --  link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\" integrity=\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\" crossorigin=\"anonymous\"  !-- Latest compiled and minified JavaScript --  script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" integrity=\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\" crossorigin=\"anonymous\" /script   Bien-s\u00fbr une fois correctement mapp\u00e9, faire appel \u00e0 ce layout dans le rendu des deux actions d\u00e9finies", 
            "title": "Cr\u00e9er son layout"
        }, 
        {
            "location": "/first/#lien", 
            "text": "Dans le layout, mettre en place un menu avec les 2 actions d\u00e9finies dans la class DemoController  Afin de r\u00e9cup\u00e9rer l'url d'une action il suffit d'utiliser le helper twig sp\u00e9cialement fait pour Symfony2  path() , \nqui prend comme premier argument le nom de la route et en second, un tableau  {}  qui repr\u00e9sente les param\u00e8tres.   a href=\"{{ path('_index') }}\" Go to index /a   En annotation, on d\u00e9finit le nom d'une route comme ci-dessous  /**\n * @Route(\"/index\", name=\"_index\")\n * @Template()\n */  + informations", 
            "title": "Lien"
        }, 
        {
            "location": "/first/#web-assets", 
            "text": "L'organisation des fichiers dans un projet symfony2 impose que seul le r\u00e9pertoire  web  est accessible du Web.\nNos fichiers static doivent y \u00eatre donc stock\u00e9s afin de les servir au client.  Ces assets, d\u00e9pendants de nos bundles, doivent \u00eatre stock\u00e9s dans  src/Lp/TestBunble/Resources/public . Afin de les \nrendre accessible, il faut les publier   $ app/console assets:install --symlink  L'option  -symlink  permet de faire un lien symbolique.  Passer les assets appel\u00e9s dans le layout en CDN par le bundle  LpTestBundle  en local.  Par exemple  link rel=\"stylesheet\" href=\"{{ asset('css/main.css') }}\" /  # Stock\u00e9 dans app/Resources/public/css/main.css link rel=\"stylesheet\" href=\"{{ asset('bundle/lptest/css/main.css') }}\" /  # Stock\u00e9 dans src/Lp/TestBundle/Resources/Public/css/main.css  Assetic  Assetic se basant sur Asset est un Bundle Symfony Framework afin de g\u00e9rer les fichiers static en les filtrants, comme :   Compil\u00e9 LESS / SAAS / CoffeeScript  Minifiier / Combin\u00e9  Optimisation d'images   + informations", 
            "title": "Web Assets"
        }, 
        {
            "location": "/first/#tests-fonctionnels", 
            "text": "Symfony int\u00e8gre un librairie de test unitaire  PHPUnit .", 
            "title": "Tests fonctionnels"
        }, 
        {
            "location": "/first/#installation", 
            "text": "$ wget https://phar.phpunit.de/phpunit.phar # version 5.0 si php   5.6 sinon phpunit-4.8.9.phar\n$ chmod +x phpunit.phar\n$ sudo mv phpunit.phar ~/bin/phpunit\n$ phpunit --version  Les Tests fonctionnels sont l\u00e0 afin tester les diff\u00e9rentes couche de votre application du routing jusqu'\u00e0 la vue :   Faire un requ\u00eate  Tester la r\u00e9ponse   Pour cela, nous allons \u00e9crire des classes afin de simuler des actions / calculs et nous tracer / tester ( assertX) ) les \nr\u00e9sultats afin de faire remonter d'\u00e9ventuelles erreurs.", 
            "title": "Installation"
        }, 
        {
            "location": "/first/#ecrire-un-test", 
            "text": "Lan\u00e7ons le test  DemoController  :  phpunit -c app src/Lp/TestBundle/Tests/Controller/DemoControllerTest.php  -c app  est une option de configuration afin d'aller checher les class de test (fichier / dossier)  Avec la class  DemoControllerTest  :  ?php\n\nnamespace Lp\\TestBundle\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase; # class \u00e9tendue PHPUnit_Framework_TestCase\n\nclass DemoControllerTest extends WebTestCase\n{\n    public function testIndex()\n    {\n        $client = static::createClient();\n\n        $crawler = $client- request('GET', '/index');\n    }\n\n    public function testWhatsmyname()\n    {\n        $client = static::createClient();\n\n        $crawler = $client- request('GET', '/whats-my-name/geoffroy');\n\n        $this- assertTrue(200 === $client- getResponse()- getStatusCode()); # second argument peut-\u00eatre un message\n    }\n\n}  Pour faire une d\u00e9monstration, changer le routing de l'une des actions test\u00e9es.  + informations", 
            "title": "Ecrire un test"
        }, 
        {
            "location": "/first/#doctrine", 
            "text": "", 
            "title": "Doctrine"
        }, 
        {
            "location": "/first/#form", 
            "text": "Faire un test du formulaire", 
            "title": "Form"
        }, 
        {
            "location": "/crm/", 
            "text": "Introduction\n\n\nObjectifs\n\n\nData Model\n\n\nUI / CRUD", 
            "title": "TP CRM"
        }, 
        {
            "location": "/crm/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/crm/#objectifs", 
            "text": "", 
            "title": "Objectifs"
        }, 
        {
            "location": "/crm/#data-model", 
            "text": "", 
            "title": "Data Model"
        }, 
        {
            "location": "/crm/#ui-crud", 
            "text": "", 
            "title": "UI / CRUD"
        }, 
        {
            "location": "/help/", 
            "text": "Ligne de commande\n\n\nSymfony2 int\u00e8gre des commandes disponibles via l'invite de commandes (sous Windows) ou le terminal (sous Linux). Il existe pas mal de commandes qui vont nous servir assez souvent lors du d\u00e9veloppement.\n\n\nLes outils disponibles en ligne de commande ont pour objectif de nous faciliter la vie. Vous pourrez \u00e0 partir de l\u00e0 g\u00e9n\u00e9rer une base de code source pour certains fichiers r\u00e9currents, vider le cache, ajouter des utilisateurs par la suite, etc...\n\n\nAfin d'y acc\u00e9der, il faut ouvrir un terminal et se placer dans le root de notre application en y tappant :\n\n\n$ app/console\n\n\n\n\nOn peut lister les command disponible :\n\n\n$ app/console list\n\n\n\n\nAvoir de l'aide sur une command :\n\n\n$ app/console generate:bundle --help\n\n\n\n\n+ informations\n\n\nAssetic\n\n\nCe bundle va nous permettre de g\u00e9rer tous les appels statics (CSS, JS, IMG).\n\n\n+ informations\n\n\nFormat de configuration\n\n\nSymfony2 support diff\u00e9rents formats de configuration (Controller, Entity)\n\n\n\n\nyml\n\n\nxml\n\n\nannotation \n\n\nphp\n\n\n\n\nFormBuilder\n\n\nServices", 
            "title": "Aide"
        }, 
        {
            "location": "/help/#ligne-de-commande", 
            "text": "Symfony2 int\u00e8gre des commandes disponibles via l'invite de commandes (sous Windows) ou le terminal (sous Linux). Il existe pas mal de commandes qui vont nous servir assez souvent lors du d\u00e9veloppement.  Les outils disponibles en ligne de commande ont pour objectif de nous faciliter la vie. Vous pourrez \u00e0 partir de l\u00e0 g\u00e9n\u00e9rer une base de code source pour certains fichiers r\u00e9currents, vider le cache, ajouter des utilisateurs par la suite, etc...  Afin d'y acc\u00e9der, il faut ouvrir un terminal et se placer dans le root de notre application en y tappant :  $ app/console  On peut lister les command disponible :  $ app/console list  Avoir de l'aide sur une command :  $ app/console generate:bundle --help  + informations", 
            "title": "Ligne de commande"
        }, 
        {
            "location": "/help/#assetic", 
            "text": "Ce bundle va nous permettre de g\u00e9rer tous les appels statics (CSS, JS, IMG).  + informations", 
            "title": "Assetic"
        }, 
        {
            "location": "/help/#format-de-configuration", 
            "text": "Symfony2 support diff\u00e9rents formats de configuration (Controller, Entity)   yml  xml  annotation   php", 
            "title": "Format de configuration"
        }, 
        {
            "location": "/help/#formbuilder", 
            "text": "", 
            "title": "FormBuilder"
        }, 
        {
            "location": "/help/#services", 
            "text": "", 
            "title": "Services"
        }
    ]
}